#!/usr/bin/php
<?php

/**
 * PHP_CodeSniffer tokenises PHP code and detects violations of a
 * defined set of coding standards.
 *
 * PHP version 5
 *
 * @package   Logics\BuildTools\CodeSniffer
 * @author    Greg Sherwood <gsherwood@squiz.net>
 * @author    Marc McIntyre <mmcintyre@squiz.net>
 * @author    Vladimir Bashkirtsev <vladimir@bashkirtsev.com>
 * @copyright 2006-2012 Squiz Pty Ltd (ABN 77 084 670 600)
 * @copyright 2013-2016 Vladimir Bashkirtsev
 * @license   https://github.com/squizlabs/PHP_CodeSniffer/blob/master/licence.txt BSD Licence
 * @version   SVN: $Date: 2016-08-17 13:15:32 +0900 (Wed, 17 Aug 2016) $ $Revision: 28 $
 * @link      $HeadURL: https://open.logics.net.au/buildtools/codesniffer/tags/0.1.3/src/phpcs $
 */

error_reporting(E_ALL | E_STRICT);

ini_set("include_path", get_include_path() . ":" . dirname(__DIR__) . "/vendor:" . dirname(dirname(dirname(__DIR__))));
require "autoload.php";
require_once __DIR__ . "/exceptions.php";

// Use PHP_Timer to print time/memory stats for the run.
// Note that the reports are the ones who actually print the data
// as they decide if it is ok to print this data to screen.
PHP_Timer::start();

$phpcs = new \Logics\BuildTools\CodeSniffer\CLI();
$phpcs->checkRequirements();

$numErrors = $phpcs->process();
if ($numErrors === 0)
    {
	exit(0);
    }
else
    {
	exit(1);
    }

?>
